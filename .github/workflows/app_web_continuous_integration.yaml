    # name of our workflow
    name: Django Continuous Integration workflow

    # triggers for our workflow
    on:
        push:
            branches:
                - 'feat/**'
                - 'develop'
                - 'main' # to remove after testing
            paths:
                - 'app_web/**'
                - '.github/workflows/app_web_continuous_deployment.yaml'
        pull_request:
            types: [opened, synchronize, reopened]
            branches:
                - develop
        workflow_call:

    #  jobs definition
    jobs:
        health-check-job: # health check job for testing and code formatting check
        
            runs-on: ubuntu-latest # os for running the job
            
            steps:
                - name: Checkout code # checking our the code at current commit that triggers the workflow
                  uses: actions/checkout@v2
    
                - name: Cache dependency # caching dependency will make our build faster.
                  uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
                  with:
                        path: ~/.cache/pip
                        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                        restore-keys: |
                            ${{ runner.os }}-pip-
    
                - name: Setup python environment # setting python environment to 3.x
                  uses: actions/setup-python@v2
                  with:
                    python-version: '3.10' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
            
                - name: Check Python version # checking the python version to see if 3.x is installed.
                  run: python --version
    
                - name: Install requirements # install application requirements
                  run: pip install -r app_web/requirements.txt
                
                - name: Install Bandit
                  run: pip install bandit

                - name: Run Security Check
                  run: bandit -r api
                  continue-on-error: true

                - name: Check Syntax # check code formatting
                  run: pycodestyle --statistics --ignore=E501,E712 app_web
                  continue-on-error: true
                    
                - name: Collect Statics # run migrations to create table in side car db container
                  run: python app_web/manage.py collectstatic --noinput

                - name: Run Test and Coverage # running tests
                #   working-directory: ./api
                  run: pytest app_web --cov-fail-under=80 -vv